language: objective-c

env:
  matrix:
   # static_build == portable, statically linked OSRM and deps
   # shared_build == non-portable, shared libraries via package manager
   - NODE_NVM_VERSION="0.10" RUN_BUILD="static_build"
   - NODE_NVM_VERSION="0.8" RUN_BUILD="static_build"
   - NODE_NVM_VERSION="0.10" RUN_BUILD="shared_build"
   - NODE_NVM_VERSION="0.8" RUN_BUILD="shared_build"
  global:
   - secure: LvrV5lifkIM99Wz0G0jqxC3uqGYIYz4hgM0oeB0MsPmQ62l8+CfIURqcFlfKSb+0s0YP2mAeacSno8oTpSZoWP27sTJutYmyk0jeVUHKQqwQClkloeErOfyLVnYijUTAX/J1Blgl+fhfvGtZE/dBIk/XEa6tEKmF0kv7z6GKVz8=
   - secure: hNMAfx4uCD8P5ycw7en9WbPFxd9Z4i8LmuClPC6lYYBTf/3lsHbtO5oRVmqFQevlZbFoPt1OU1pr4Pnj7iQsYnezc3YBevXQNsv0UvMlQAzwmW2cQOuRjHZ5TXEEMAQBbiWO0BOeQrC6m46wkQbkuzX1XpxRnaXhdhd/FeZxVwk=
   - secure: Atz+Zcl9Faw1OvUEv5vK3aYXGWQS8dvDd4nLQ/2XU0doVKjsNvFxVWtBFvE91yvbnJnkSR6IrD6U4I3RQkmaEZ4s37nipHZ1nkuPlSucV0SamAwOcO4Wm+D0yrlPAt/bDQHlAojY1UE98U0oqDKfkBvLwdzIGvv0qISR/W/8rLI=

before_install:
# check if tag exists and matches package.json
- scripts/validate_tag.sh
# get commit message
- COMMIT_MESSAGE=$(git show -s --format=%B $TRAVIS_COMMIT | tr -d '\n')
# put node-pre-gyp on path
- export PATH=./node_modules/.bin/:$PATH
# here we set up the node version on the fly based on the matrix value.
# This is done manually so that it is easy to flip the 'language' to
# objective-c in another branch (to run the same travis.yml on OS X)
- git clone https://github.com/creationix/nvm.git ../.nvm
- source ../.nvm/nvm.sh
- nvm install $NODE_NVM_VERSION
- nvm use $NODE_NVM_VERSION
- node --version
- npm --version

install:
# set a few env settings for the static build script
- if [[ $RUN_BUILD == "static_build" ]]; then PACKAGE_COMMAND_LINE_TOOLS=true; TMP_DEPS_DIR=`mktemp -d -t XXXXXXXXXXX`; fi;
- NODE_MODULE_ROOT=`pwd`
- export OSRM_BRANCH="develop"
- export OSRM_COMMIT="40517e3010757bdbb"
# WARNING: this script modifies the environment
- source ./scripts/${RUN_BUILD}.sh
- cd ${NODE_MODULE_ROOT}

before_script:
- npm install mocha

before_script:
# install from source, ensure this works first
- npm install --build-from-source
- if [[ `uname -s` == 'Darwin' ]]; then otool -L ./lib/binding/* || true; fi
- if [[ `uname -s` == 'Linux' ]]; then readelf -d ./lib/binding/* || true; fi
# if a static build then are safe to nuke the dependencies
- if [[ $RUN_BUILD == "static_build" ]]; then which osrm-extract||true;rm -rf ${TMP_DEPS_DIR};which osrm-extract||true; fi;
- make test

script:
# now we publish the binary, if needed
- PUBLISH_BINARY=false
# check if this is a git tag built statically to be portable
- if [[ $RUN_BUILD == "static_build" ]] && [[ $TRAVIS_BRANCH == `git describe --tags --always HEAD` ]]; then echo PUBLISH_BINARY;PUBLISH_BINARY=true; fi;
# or check if we are manually requesting binary publishing via a commit keyword
- if [[ $RUN_BUILD == "static_build" ]] && test "${COMMIT_MESSAGE#*'[publish binary]'}" != "$COMMIT_MESSAGE"; then echo PUBLISH_BINARY;PUBLISH_BINARY=true; fi;
# if either are true, then publish the binary
# Note: this publishing is done here, in the 'script' section, instead of the 'after_success'
# since we want any failure here to stop the build immediately
- if [[ $PUBLISH_BINARY == true ]]; then node-pre-gyp package publish; fi
# now clean up to prepare to re-install from remote binary
- node-pre-gyp clean
# now install from published binary
# Note: we capture the error here so that if the install fails we can unpublish
- INSTALL_RESULT=0
- if [[ $PUBLISH_BINARY == true ]]; then INSTALL_RESULT=$(npm install --fallback-to-build=false)$? || true; fi
# if install returned non zero (errored) then we first unpublish and then call false so travis will bail at this line
- if [[ $INSTALL_RESULT != 0 ]]; then 'echo failed!';node-pre-gyp unpublish;false; fi
# If success then we arrive here so lets clean up
- node-pre-gyp clean

after_success:
# Now finally, all of the above succeeded!
# It's time to auto-publish to npm if this is
# a tag or the commit has the [publish] keyword
# Note: we only allow publishing for "static_build" since
# that is the only portable method of building
- PUBLISH=false
- npm config set email dane@dbsgeo.com
- npm config set _auth $NPM_AUTH
- echo $RUN_BUILD
- echo $NODE_VERSION
- echo $NODE_NVM_VERSION
- echo `git show -s --format=%B $TRAVIS_COMMIT | tr -d '\n'`
- if [[ $RUN_BUILD == "static_build" ]] && [[ $NODE_NVM_VERSION == "0.8" ]] && test "${COMMIT_MESSAGE#*'[publish]'}" != "$COMMIT_MESSAGE"; then echo "publish"; PUBLISH=true; fi;
- if [[ $RUN_BUILD == "static_build" ]] && [[ $NODE_NVM_VERSION == "0.8" ]] && [[ $TRAVIS_BRANCH == `git describe --tags --always HEAD` ]]; then echo "publish"; PUBLISH=true; fi;
- if [[ $PUBLISH == true ]]; then echo "publishing"; npm publish; fi;
